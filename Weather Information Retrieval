1.	Source Code for Weather Information Retrival
import urllib2
import json
import RPi.GPIO as GPIO #Import GPIO package
import time     #Import time package

key = 'e89fb32ab64fd4ab' # Weatherunderground API key

while 1: # while loop to continue running the following code to the python shell to display weather information until user exits
    print '\n\n\n'
    timeOn_Off =float(raw_input('Please enter the duration you want the led to be on for in secs: '))
    print '\n'
    zip = raw_input('For which ZIP code would you like to see the weather forecast? ') #Asks user for input to enter desired zip code to access information
    url = 'http://api.wunderground.com/api/' + key + '/conditions/q/' + zip + '.json'   #full url to contact webserver and communicate with the weather underground api
    openUrl = urllib2.urlopen(url) #opens the url
    json_string = openUrl.read() # Retrieves the JSON object data from Weather Underground request over HTTP
    parsed_json = json.loads(json_string) # Stores JSON object dictionary data into variable that will be later parsed to display specific weather information
    print '\n\n\n'
    print 'Copy and paste the following link into your web browser: '+ url # prints full url giving the user the option to copy and paste into a web browser
    print '\n\n\n'
    print json_string #Prints the JSON data in column format
    print '\n\n\n'
    print parsed_json #Prints the JSON data formatted more compactly
        
    
    #state = parsed_json['location']['state'] #Received an error because location not in json data dictionary list
    city = parsed_json['current_observation']['display_location']['full']
    weather = parsed_json['current_observation']['weather']
    weatherStrA = weather.encode("ascii")
    # weatherStrU = weather.encode("utf-8") #encodes the unicode JSON data string to regular python string
    humidity = parsed_json['current_observation']['relative_humidity']
    temperature_string = parsed_json['current_observation']['temperature_string']
    tempNum = int (parsed_json['current_observation']['temp_f'])
    feelslike_string = parsed_json['current_observation']['feelslike_string']
    humStr= humidity.encode("ascii")
    humFStr = humStr[:-1]
    humNFStr = int(humFStr)
    lastUpdate = parsed_json['current_observation']['observation_time']
    

    print '\n\n\n'
    print 'Weather in ' + city + ' is '  + weather.lower() + '. The temperature is ' + temperature_string + ' but it feels like ' + feelslike_string + '. The humidity is  ' + humidity + '. ' + lastUpdate + '.'
    openUrl.close()
    '''
    The following section of code determines if the temperature is a certain value
    then turns the led on for desired length of time if temperature meets the boolean condition else keeps the led off and displays that it didn't meet the condition
    '''
    print '\n'
    tempBC = int(raw_input('Please enter temperature you want to test condition for: ')) #integer type variable that changes used to test temperature in boolean condition
    if tempNum == tempBC: 
        GPIO.setmode(GPIO.BCM) #Setup gpio to communicate with board h/e not communicating with boar
        #GPIO.setwarnings(False)
        GPIO.setup(21, GPIO.OUT) #Sets up specific # pin on general purpose input/output pin as output
        print '\n'
        print 'Temperature Control Test'
        print 'LED on' #print led on to show that the led is on
        GPIO.output(21, GPIO.HIGH) #Sends either 5v or 3.3 volts to this GPIO pin
        time.sleep((timeOn_Off)) # Holds program for n secs
        print 'LED off' #prints led off to show that led is now off
        GPIO.output(21, GPIO.LOW) #Sends 0v to this GPIO pin to turn off led
        time.sleep((timeOn_Off)) # Holds program for n secs
        GPIO.cleanup() #Resets the GPIO values used into this program back to their default values

    else:
        print'\n'
        print 'The temperature is not '  + str(tempBC) + '.'

    # enclose code in ''' _ ''' to do block comment

    
    '''
    The following section of code determines if the humdity is a certain value
    then turns the led on for desired length of time if humidity meets the boolean condition else keeps the led off and displays that it didn't meet the condition
    '''
    print '\n'
    humBC = int(raw_input('Please enter humidity value you want to test condition for: '))#integer type variable that changes used to test humidity in boolean condition
    if humNFStr  humBC: # old booleand conditon: humNFStr < 70
        GPIO.setmode(GPIO.BCM) #Setup gpio to communicate with board h/e not communicating with boar
        #GPIO.setwarnings(False)
        GPIO.setup(26, GPIO.OUT) #Sets up specific # pin on general purpose input/output pin as output
        print '\n'
        print 'Humidity Control Test'
        print 'LED on' #print led on to show that the led is on
        GPIO.output(26, GPIO.HIGH) #Sends either 5v or 3.3 volts to this GPIO pin
        time.sleep((timeOn_Off)) # Holds program for n secs
        print 'LED off' #prints led off to show that led is now off
        GPIO.output(26, GPIO.LOW) #Sends 0v to this GPIO pin to turn off led
        time.sleep((timeOn_Off)) # Holds program for n secs
        GPIO.cleanup() #Resets the GPIO values used into this program back to their default values

    else:
        print'\n'
        print 'The humidity is not '  + str(humBC) + '.'
